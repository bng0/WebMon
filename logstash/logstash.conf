input {
    beats {
        host => "0.0.0.0"
        port => 9998
        type => "filebeat_modsec"
    }
    beats {
        host => "0.0.0.0"
        port => 9999
        type => "filebeat_kong"
    }
}

filter {
    if [type] == "filebeat_kong" {
        json {
            source => "message"
        }
        mutate {
            rename => ["[request]", "[http][request]"]
            rename => ["[http][request][headers]", "[http][request][header]"]
            rename => ["[http][request][header][x-real-ip]", "[source][ip]"]
            rename => ["[http][request][header][host]", "[host][hostname]"]
            rename => ["[http][request][header][user-agent]", "[user_agent][original]"]
            rename => ["[http][request][uri]", "[url][path]"]
            rename => ["[http][request][body]", "[http][request][body][content]"]
            rename => ["[http][request][size]", "[http][request][bytes]"]
            rename => ["[http][request][header][content-length]", "[http][request][body][bytes]"]
            rename => ["[http][request][header][content-type]", "[http][request][mime_type]"]
            rename => ["[http][request][header][referrer]", "[http][request][referrer]"]

            rename => ["[response]", "[http][response]"]
            rename => ["[http][response][headers]", "[http][response][header]"]
            rename => ["[http][response][body]", "[http][response][body][content]"]
            rename => ["[http][response][size]", "[http][response][bytes]"]
            rename => ["[http][response][header][content-length]", "[http][response][body][bytes]"]
            rename => ["[http][response][status]", "[http][response][status_code]"]
            rename => ["[http][response][header][content-type]", "[http][response][header][mime_type]"]
        }
        ruby {
            code => '
                i = 0
                querystr = ""
                qstr = event.get("[http][request][querystring]")
                return if qstr.nil?
                qstr.each { |k,v|
                    if i > 0
                        querystr = querystr + "&" + k + "=" + v
                        i = i + 1
                    else
                        querystr = k + "=" + v
                        i = i + 1
                    end
                }
                event.set("[url][query]", querystr)
            '
        }
        mutate {
            remove_field => ["@version", "client_ip", "[host][name]", "message", "[http][request][querystring]","[http][request][request_uri]", "[latencies]", "[agent]", "[log]", "[ecs]"]
        }
        if [source][ip] {
            geoip {
                source => "source.ip"
            } 
        }
    }

    if [type] == "filebeat_modsec" {
        json {
            source => "message"
        }
        ruby {
            code => '
                event.get("transaction").each { |k,v|
                    event.set(k,v)
                }
                event.remove("transaction")
            '
        }
        ruby { 
            code => '
                matchArray = []
                ruleIdArray = []
                messageArray = []
                dataArray = []
                tagArray = []
                attackArray = []
                severityValue = 0
                respBytesArray = []
                event.get("[messages]").each_with_index { |a,index|
                    if (event.get("[messages][#{index}][message]") =~ /(.*)Inbound Anomaly Score Exceeded(.*)Total Score:(.*)/)
                        event.set("ScoreMessage",event.get("[messages][#{index}][message]"))
                    end
                    matchData = event.get("[messages][#{index}][details][match]")
                    if (matchData =~ /(.+)/)
                        matchArray << matchData
                    end
                    ruleIdData = event.get("[messages][#{index}][details][ruleId]")
                    if (ruleIdData =~ /(.+)/)
                        ruleIdArray << ruleIdData
                    end
                    messageData = event.get("[messages][#{index}][message]")
                    if (messageData =~ /(.+)/)
                        messageArray << messageData
                    end
                    dataData = event.get("[messages][#{index}][details][data]")
                    if (dataData =~ /(.+)/)
                        dataArray << dataData
                    end
                    tagData = event.get("[messages][#{index}][details][tags]")
                    if (tagData =~ /(.+)/)
                        tagArray << tagData
                    end
                    event.get("[messages][#{index}][details][tags]").each { |attackData|
                        if (attackData =~ /attack-(.*)/)
                            attackArray << attackData[/attack\-([a-zA-Z\-]+)/,1]
                        end
                    }
                    severityData = event.get("[messages][#{index}][details][severity]")
                    if (severityData =~ /(.+)/)
                        severityValue = severityValue + severityData.to_i
                    end
                    event.remove("[messages][#{index}][details][accuracy]")
                    event.remove("[messages][#{index}][details][file]")
                    event.remove("[messages][#{index}][details][lineNumber]")
                    event.remove("[messages][#{index}][details][maturity]")
                    event.remove("[messages][#{index}][details][reference]")
                    event.remove("[messages][#{index}][details][rev]")
                    event.remove("[messages][#{index}][details][ver]")
                    event.remove("[messages][#{index}][details][match]")
                    event.remove("[messages][#{index}][details][ruleId]")
                    event.remove("[messages][#{index}][message]")
                    event.remove("[messages][#{index}][details][data]")
                    event.remove("[messages][#{index}][details][tags]")
                    event.remove("[messages][#{index}][details][severity]")
                }
                event.set("[threat][indicator][description]", matchArray)
                event.set("[threat][technique][id]",ruleIdArray)
                event.set("[threat][technique][name]", messageArray)
                event.set("[threat][tactic][name]", dataArray)
                event.set("tags", tagArray)
                event.set("[vulnerability][category]", attackArray.uniq)
                event.set("Severity", severityValue)
                if severityValue <= 2
                    event.set("[vulnerability][severity]", "Low")
                elsif severityValue <= 5
                    event.set("[vulnerability][severity]", "Medium")
                elsif severityValue <= 8
                    event.set("[vulnerability][severity]", "High")
                else
                    event.set("[vulnerability][severity]", "Critical")
                end
            '
        }
            mutate {
                remove_field => [ "[response][body]" ]
            }
        grok {
            match => { "ScoreMessage" => ".*Inbound Anomaly Score Exceeded.*Total Score.*%{NUMBER:[vulnerability][score][base]}.*" }
        }
        mutate {
            remove_field => [ "port","@version","port","host_ip","host_port","[producer]","server_id", "[transaction]","time_stamp", "ScoreMessage","[agent]","[ecs]","[host][name]","[input]","[log]","message" ]
            rename => ["[request]", "[http][request]"]
            rename => ["[http][request][headers]", "[http][request][header]"]
            rename => ["client_ip", "[source][ip]"]
            rename => ["client_port", "[source][port]"]
            rename => ["[http][request][header][host]","[host][hostname]"]
            rename => ["[http][request][header][Host]","[host][hostname]"]
            rename => ["[http][request][header][user-agent]", "[user_agent][original]"]
            rename => ["[http][request][header][User-Agent]", "[user_agent][original]"]
            rename => ["[http][request][uri]", "[url][path]"]
            rename => ["[http][request][body]", "[http][request][body][content]"]
            rename => ["[http][request][header][content-length]","[http][request][body][bytes]"]
            rename => ["[http][request][header][Content-Length]","[http][request][body][bytes]"]
            rename => ["[http][request][header][content-type]","[http][request][mime_type]"]
            rename => ["[http][request][header][Content-Type]","[http][request][mime_type]"]
            rename => ["[http][request][method]", "[http][request][method]"]
            rename => ["[http][request][http_version]","[http][version]"]
            rename => ["[http][request][header][referrer]","[http][request][referrer]"]
            rename => ["[http][request][header][Referrer]","[http][request][referrer]"]

            rename => ["[response]", "[http][response]"]
            rename => ["[http][response][headers]", "[http][response][header]"]
            rename => ["[http][response][http_code]","[http][response][status_code]"]
            rename => ["[http][response][header][content-length]","[http][response][body][bytes]"]
            rename => ["[http][response][header][Content-Length]","[http][response][body][bytes]"]
            rename => ["[http][response][header][content-type]","[http][response][mime_type]"]
            rename => ["[http][response][header][Content-Type]","[http][response][mime_type]"]

            rename => ["unique_id", "[trace][id]"]
        }
        if [source][ip] {
            geoip {
                source => "source.ip"
            } 
        }

    }
}

output {
    if [type] == "filebeat_modsec" {
        elasticsearch {
            hosts => [ "http://172.20.0.1:9200" ]
            index => "logstash-filebeat-modsec-%{+YYYY.MM.dd}"
        }
    }
    if [type] == "filebeat_kong" {
        elasticsearch {
            hosts => [ "http://172.20.0.1:9200" ]
            index => "logstash-filebeat-kong-%{+YYYY.MM.dd}"
        }
    }
}
